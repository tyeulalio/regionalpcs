[{"path":"/articles/regionalpcs.html","id":"regionalpcs","dir":"Articles","previous_headings":"","what":"regionalpcs","title":"regionalpcs","text":"Navigating complexity DNA methylation data poses substantial challenges due intricate biological patterns. regionalpcs package conceived address substantial need enhanced summarization interpretation regional level. Traditional methodologies, foundational, may fully encapsulate biological nuances methylation patterns, thereby potentially yielding interpretations may suboptimal veer towards inaccuracies. package introduces utilizes regional principal components (rPCs), designed adeptly capture biologically relevant signals embedded within DNA methylation data. implementation rPCs, researchers can gain new insights complex interactions effects methylation data might otherwise missed.","code":""},{"path":"/articles/regionalpcs.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"regionalpcs","text":"regionalpcs package can easily installed Bioconductor, providing latest stable version suitable general use. Alternatively, interested exploring utilizing latest features developments, GitHub version can installed directly.","code":""},{"path":"/articles/regionalpcs.html","id":"bioconductor-installation","dir":"Articles","previous_headings":"Installation","what":"Bioconductor Installation","title":"regionalpcs","text":"Install regionalpcs Bioconductor using command . Ensure R version compatible package version available Bioconductor smooth installation functionality.","code":"if (!requireNamespace(\"BiocManager\", quietly=TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"regionalpcs\")"},{"path":"/articles/regionalpcs.html","id":"development-version-installation","dir":"Articles","previous_headings":"Installation","what":"Development Version Installation","title":"regionalpcs","text":"access development version regionalpcs directly GitHub, might include new features enhancements yet available Bioconductor version, use following commands. Note development version might less stable officially released version.","code":"# install devtools package if not already installed if (!requireNamespace(\"devtools\", quietly=TRUE))     install.packages(\"devtools\")  # download and install the regionalpcs package devtools::install_github(\"tyeulalio/regionalpcs\")"},{"path":[]},{"path":"/articles/regionalpcs.html","id":"loading-required-packages","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial","what":"Loading Required Packages","title":"regionalpcs","text":"tutorial depends several Bioconductor packages. packages loaded beginning analysis. Let’s proceed load packages, briefly understanding roles tutorial. regionalpcs: Primary package summarizing interpreting DNA methylation data regional level. GenomicRanges: Facilitates representation manipulation genomic intervals variables defined along genome. tidyr, tibble, dplyr: Assist data tidying, representation, manipulation. minfiData: Provides example Illumina 450k data, aiding demonstration regionalpcs functionalities. TxDb.Hsapiens.UCSC.hg19.knownGene: Accommodates transcriptome data, useful annotating results. packages loaded, can start using functions provided package.","code":"library(regionalpcs) library(GenomicRanges) library(tidyr) library(tibble) library(dplyr) library(minfiData) library(TxDb.Hsapiens.UCSC.hg19.knownGene)"},{"path":[]},{"path":"/articles/regionalpcs.html","id":"loading-minfi-sample-dataset","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Load the Dataset","what":"Loading Minfi Sample Dataset","title":"regionalpcs","text":"tutorial, ’ll utilize sample dataset, MsetEx.sub, subset derived Illumina’s Human Methylation 450k dataset, specifically preprocessed contain 600 CpGs across 6 samples. dataset stored MethylSet object, commonly used represent methylation data. methylation M-values, denoting proportion methylated cytosines particular CpG site, extracted dataset subsequent analyses. Note MsetEx.sub provides manageable slice data can utilize illustrate capabilities regionalpcs without requiring extensive computational resources. Now dataset loaded methylation values extracted, let’s proceed demonstrating core functionalities regionalpcs.","code":"# Load the MethylSet data data(MsetEx.sub)  # Display the first few rows of the dataset for a preliminary view head(MsetEx.sub) #> class: MethylSet  #> dim: 6 6  #> metadata(0): #> assays(2): Meth Unmeth #> rownames(6): cg00050873 cg00212031 ... cg00455876 cg01707559 #> rowData names(0): #> colnames(6): 5723646052_R02C02 5723646052_R04C01 ... 5723646053_R05C02 #>   5723646053_R06C02 #> colData names(13): Sample_Name Sample_Well ... Basename filenames #> Annotation #>   array: IlluminaHumanMethylation450k #>   annotation: ilmn12.hg19 #> Preprocessing #>   Method: Raw (no normalization or bg correction) #>   minfi version: 1.21.2 #>   Manifest version: 0.4.0  # Extract methylation M-values from the MethylSet # M-values are logit-transformed beta-values and are often used in differential # methylation analysis for improved statistical performance. mvals <- getM(MsetEx.sub)  # Display the extracted methylation beta values head(mvals) #>            5723646052_R02C02 5723646052_R04C01 5723646052_R05C02 #> cg00050873          3.502348         0.4414491          4.340695 #> cg00212031         -3.273751         0.9234662         -2.614777 #> cg00213748          2.076816        -0.1309465          1.260995 #> cg00214611         -3.438838         1.7463950         -2.270551 #> cg00455876          1.839010        -0.9927320          1.619479 #> cg01707559         -3.303987        -0.6433201         -3.540887 #>            5723646053_R04C02 5723646053_R05C02 5723646053_R06C02 #> cg00050873        0.24458355        -0.3219281         0.2744392 #> cg00212031       -0.21052257        -0.6861413        -0.1397595 #> cg00213748       -1.10373279        -1.6616553        -0.1270869 #> cg00214611        0.29029649        -0.2103599        -0.6138630 #> cg00455876       -0.09504721        -0.2854655         0.6361273 #> cg01707559       -0.74835377        -0.4678048        -1.1345421"},{"path":[]},{"path":"/articles/regionalpcs.html","id":"load-illumina-450k-array-probe-positions","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Obtaining Methylation Array Probe Positions","what":"Load Illumina 450k Array Probe Positions","title":"regionalpcs","text":"step, ’ll obtain genomic coordinates CpG sites methylation dataset using 450k array probe annotations using minfi package.","code":"# Map the methylation data to genomic coordinates using the mapToGenome # function. This creates a GenomicMethylSet (gset) which includes genomic  # position information for each probe. gset <- mapToGenome(MsetEx.sub)  # Display the GenomicMethylSet object to observe the structure and initial  # entries. gset #> class: GenomicMethylSet  #> dim: 600 6  #> metadata(0): #> assays(2): Meth Unmeth #> rownames(600): cg01003813 cg03723195 ... cg03930849 cg08265308 #> rowData names(0): #> colnames(6): 5723646052_R02C02 5723646052_R04C01 ... 5723646053_R05C02 #>   5723646053_R06C02 #> colData names(13): Sample_Name Sample_Well ... Basename filenames #> Annotation #>   array: IlluminaHumanMethylation450k #>   annotation: ilmn12.hg19 #> Preprocessing #>   Method: Raw (no normalization or bg correction) #>   minfi version: 1.21.2 #>   Manifest version: 0.4.0  # Convert the genomic position data into a GRanges object, enabling genomic  # range operations in subsequent analyses. # The GRanges object (cpg_gr) provides a versatile structure for handling  # genomic coordinates in R/Bioconductor. cpg_gr <- granges(gset)  # Display the GRanges object for a preliminary view of the genomic coordinates. cpg_gr #> GRanges object with 600 ranges and 0 metadata columns: #>              seqnames    ranges strand #>                 <Rle> <IRanges>  <Rle> #>   cg01003813     chrX   2715058      * #>   cg03723195     chrX   2847354      * #>   cg00074638     chrX   2883307      * #>   cg01728536     chrX   7070451      * #>   cg01864404     chrX   8434367      * #>          ...      ...       ...    ... #>   cg26983430     chrY  24549675      * #>   cg01757887     chrY  25114810      * #>   cg00061679     chrY  25314171      * #>   cg03930849     chrY  26716289      * #>   cg08265308     chrY  28555550      * #>   ------- #>   seqinfo: 2 sequences from hg19 genome; no seqlengths"},{"path":[]},{"path":"/articles/regionalpcs.html","id":"introduction","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types","what":"Introduction","title":"regionalpcs","text":"Gene regions, include functional segments promoters, gene bodies, intergenic regions, play pivotal roles gene expression regulation. Summarizing methylation patterns across regions can provide insights potential gene regulatory mechanisms associations phenotypes disease states. Herein, delve succinctly summarize methylation data crucial genomic segments using regionalpcs package.","code":""},{"path":"/articles/regionalpcs.html","id":"load-gene-region-annotations","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types","what":"Load Gene Region Annotations","title":"regionalpcs","text":"First, let’s load gene region annotations. Make sure align genomic builds annotations methylation data.","code":"# Obtain promoter regions # The TxDb object 'txdb' facilitates the retrieval of transcript-based  # genomic annotations. txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene  # Extracting promoter regions with a defined upstream and downstream window.  # This GRanges object 'promoters_gr' will be utilized to map and summarize  # methylation data in promoter regions. promoters_gr <- suppressMessages(promoters(genes(txdb),                                      upstream=1000,                                      downstream=0))  # Display the GRanges object containing the genomic coordinates of promoter  # regions. promoters_gr #> GRanges object with 23056 ranges and 1 metadata column: #>         seqnames              ranges strand |     gene_id #>            <Rle>           <IRanges>  <Rle> | <character> #>       1    chr19   58874215-58875214      - |           1 #>      10     chr8   18247755-18248754      + |          10 #>     100    chr20   43280377-43281376      - |         100 #>    1000    chr18   25757446-25758445      - |        1000 #>   10000     chr1 244006887-244007886      - |       10000 #>     ...      ...                 ...    ... .         ... #>    9991     chr9 115095945-115096944      - |        9991 #>    9992    chr21   35735323-35736322      + |        9992 #>    9993    chr22   19109968-19110967      - |        9993 #>    9994     chr6   90538619-90539618      + |        9994 #>    9997    chr22   50964906-50965905      - |        9997 #>   ------- #>   seqinfo: 93 sequences (1 circular) from hg19 genome"},{"path":"/articles/regionalpcs.html","id":"create-a-region-map","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types","what":"Create a Region Map","title":"regionalpcs","text":"Creating region map, systematically assigns CpGs specific gene regions, stands crucial precursor gene-region summarization using regionalpcs package. mapping elucidates physical positioning CpGs within particular gene regions, facilitating upcoming endeavors comprehend methylation varies across distinct genomic segments. ’ll use create_region_map function regionalpcs package. function takes two genomic ranges objects, cpg_gr contains CpG positions genes_gr contains gene region positions. Make sure positions aligned genome build (e.g. GrCH37, CrCH38). Note: second column region_map must contain values matching rownames methylation dataframe.","code":"# get the region map using the regionalpcs function region_map <- regionalpcs::create_region_map(cpg_gr=cpg_gr,                                                  genes_gr=promoters_gr)  # Display the initial few rows of the region map. head(region_map) #>     gene_id     cpg_id #> 1 100131434 cg00466309 #> 2 100133941 cg05230942 #> 3 100133957 cg00636562 #> 4     10084 cg01303569 #> 5      1069 cg01056373 #> 6     10857 cg01333849"},{"path":"/articles/regionalpcs.html","id":"summarizing-gene-regions-with-regional-principal-components","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types","what":"Summarizing Gene Regions with Regional Principal Components","title":"regionalpcs","text":"final section, ’ll summarize gene regions using Principal Components (PCs) capture maximum variation. ’ll utilize compute_regional_pcs function regionalpcs package .","code":""},{"path":"/articles/regionalpcs.html","id":"compute-regional-pcs","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Compute Regional PCs","title":"regionalpcs","text":"Let’s calculate regional PCs using gene regions demonstration purposes.","code":"# Display head of region map head(region_map) #>     gene_id     cpg_id #> 1 100131434 cg00466309 #> 2 100133941 cg05230942 #> 3 100133957 cg00636562 #> 4     10084 cg01303569 #> 5      1069 cg01056373 #> 6     10857 cg01333849 dim(region_map) #> [1] 211   2  # Compute regional PCs res <- compute_regional_pcs(meth=mvals, region_map=region_map, pc_method=\"gd\") #> Using Gavish-Donoho method"},{"path":"/articles/regionalpcs.html","id":"inspecting-the-output","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Inspecting the Output","title":"regionalpcs","text":"function returns list containing multiple elements. Let’s first look elements .","code":"# Inspect the output list elements names(res) #> [1] \"regional_pcs\"     \"percent_variance\" \"loadings\"         \"info\""},{"path":"/articles/regionalpcs.html","id":"extracting-and-viewing-regional-pcs","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Extracting and Viewing Regional PCs","title":"regionalpcs","text":"first element (res$regional_pcs) data frame containing calculated regional PCs.","code":"# Extract regional PCs regional_pcs <- res$regional_pcs head(regional_pcs)[1:4] #>               5723646052_R02C02 5723646052_R04C01 5723646052_R05C02 #> 100131434-PC1         -3.887949        1.82168108        -4.2354365 #> 100133941-PC1          1.100370        0.06719947         0.1932361 #> 100133957-PC1         -2.032026        0.19154436        -0.9193417 #> 10084-PC1             -5.011579        2.34574585        -4.2050727 #> 1069-PC1              -2.004785        1.20363622        -2.5436686 #> 10857-PC1             -1.986294        1.31482789        -2.0044911 #>               5723646053_R04C02 #> 100131434-PC1         2.1707679 #> 100133941-PC1        -0.7438658 #> 100133957-PC1         1.1903709 #> 10084-PC1             2.2586300 #> 1069-PC1              1.5851359 #> 10857-PC1             2.1369556"},{"path":"/articles/regionalpcs.html","id":"understanding-the-results","dir":"Articles","previous_headings":"regionalpcs R Package Tutorial > Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Understanding the Results","title":"regionalpcs","text":"output data frame regional PCs region rows samples columns. new representation methylation values, now gene regional PC scale. can feed downstream analyses . number regional PCs representing gene region determined Gavish-Donoho method. method allows us identify PCs capture actual signal data noise inherent dataset. explore alternative methods, can change pc_method parameter. summarized genes using just one PC. number PCs depends three main factors: number samples, number CpGs gene region, noise methylation data. default, compute_regional_pcs function uses Gavish-Donoho method. However, can also use Marcenko-Pasteur method setting pc_method parameter: Marcenko-Pasteur Gavish-Donoho methods based Random Matrix Theory, aim identify number significant PCs capture true signal data just noise. However, methods differ select number significant PCs. Marcenko-Pasteur method typically selects PCs represent gene region compared Gavish-Donoho method. may due different ways two methods estimate noise level data. Ultimately, choice two methods depends specific needs goals analysis. Gavish-Donoho method tends provide conservative results, Marcenko-Pasteur method may capture underlying signal data. Researchers carefully consider objectives characteristics data selecting method.","code":"# Count the number of unique gene regions and PCs regions <- data.frame(gene_pc = rownames(regional_pcs)) |>     separate(gene_pc, into = c(\"gene\", \"pc\"), sep = \"-\") head(regions) #>        gene  pc #> 1 100131434 PC1 #> 2 100133941 PC1 #> 3 100133957 PC1 #> 4     10084 PC1 #> 5      1069 PC1 #> 6     10857 PC1  # number of genes that have been summarized length(unique(regions$gene)) #> [1] 142  # how many of each PC did we get table(regions$pc) #>  #> PC1  #> 142 # Using Marcenko-Pasteur method mp_res <- compute_regional_pcs(mvals, region_map, pc_method = \"mp\") #> Using Marchenko-Pastur method  # select the regional pcs mp_regional_pcs <- mp_res$regional_pcs  # separate the genes from the pc numbers mp_regions <- data.frame(gene_pc = rownames(mp_regional_pcs)) |>     separate(gene_pc, into = c(\"gene\", \"pc\"), sep = \"-\") head(mp_regions) #>        gene  pc #> 1 100131434 PC1 #> 2 100133941 PC1 #> 3 100133957 PC1 #> 4     10084 PC1 #> 5      1069 PC1 #> 6     10857 PC1  # number of genes that have been summarized length(unique(mp_regions$gene)) #> [1] 142  # how many of each PC did we get table(mp_regions$pc) #>  #> PC1  #> 142"},{"path":"/articles/regionalpcs.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"regionalpcs","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_United States.utf8  #> [2] LC_CTYPE=English_United States.utf8    #> [3] LC_MONETARY=English_United States.utf8 #> [4] LC_NUMERIC=C                           #> [5] LC_TIME=English_United States.utf8     #>  #> time zone: America/Los_Angeles #> tzcode source: internal #>  #> attached base packages: #> [1] parallel  stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2            #>  [2] GenomicFeatures_1.53.1                             #>  [3] AnnotationDbi_1.63.2                               #>  [4] minfiData_0.47.0                                   #>  [5] IlluminaHumanMethylation450kanno.ilmn12.hg19_0.6.1 #>  [6] IlluminaHumanMethylation450kmanifest_0.4.0         #>  [7] minfi_1.47.0                                       #>  [8] bumphunter_1.43.0                                  #>  [9] locfit_1.5-9.8                                     #> [10] iterators_1.0.14                                   #> [11] foreach_1.5.2                                      #> [12] Biostrings_2.69.2                                  #> [13] XVector_0.41.1                                     #> [14] SummarizedExperiment_1.31.1                        #> [15] Biobase_2.61.0                                     #> [16] MatrixGenerics_1.13.1                              #> [17] matrixStats_1.0.0                                  #> [18] dplyr_1.1.2                                        #> [19] tibble_3.2.1                                       #> [20] tidyr_1.3.0                                        #> [21] GenomicRanges_1.53.1                               #> [22] GenomeInfoDb_1.37.2                                #> [23] IRanges_2.35.2                                     #> [24] S4Vectors_0.39.1                                   #> [25] BiocGenerics_0.47.0                                #> [26] regionalpcs_0.99.4                                 #> [27] BiocStyle_2.29.1                                   #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.3.1             BiocIO_1.11.0             #>   [3] bitops_1.0-7              filelock_1.0.2            #>   [5] preprocessCore_1.63.1     XML_3.99-0.14             #>   [7] lifecycle_1.0.3           rprojroot_2.0.3           #>   [9] lattice_0.21-8            MASS_7.3-60               #>  [11] base64_2.0.1              scrime_1.3.5              #>  [13] magrittr_2.0.3            limma_3.57.7              #>  [15] sass_0.4.7                rmarkdown_2.24            #>  [17] jquerylib_0.1.4           yaml_2.3.7                #>  [19] doRNG_1.8.6               askpass_1.1               #>  [21] cowplot_1.1.1             DBI_1.1.3                 #>  [23] RColorBrewer_1.1-3        abind_1.4-5               #>  [25] zlibbioc_1.47.0           quadprog_1.5-8            #>  [27] purrr_1.0.2               RCurl_1.98-1.12           #>  [29] rappdirs_0.3.3            GenomeInfoDbData_1.2.10   #>  [31] RMTstat_0.3.1             ggrepel_0.9.3             #>  [33] irlba_2.3.5.1             genefilter_1.83.1         #>  [35] dqrng_0.3.0               annotate_1.79.0           #>  [37] pkgdown_2.0.7             DelayedMatrixStats_1.23.4 #>  [39] codetools_0.2-19          DelayedArray_0.27.10      #>  [41] xml2_1.3.5                tidyselect_1.2.0          #>  [43] ScaledMatrix_1.9.1        beanplot_1.3.1            #>  [45] BiocFileCache_2.9.1       illuminaio_0.43.0         #>  [47] GenomicAlignments_1.37.0  jsonlite_1.8.7            #>  [49] multtest_2.57.0           survival_3.5-7            #>  [51] systemfonts_1.0.4         tools_4.3.1               #>  [53] progress_1.2.2            ragg_1.2.5                #>  [55] Rcpp_1.0.11               glue_1.6.2                #>  [57] SparseArray_1.1.11        xfun_0.40                 #>  [59] HDF5Array_1.29.3          withr_2.5.0               #>  [61] BiocManager_1.30.22       fastmap_1.1.1             #>  [63] rhdf5filters_1.13.5       fansi_1.0.4               #>  [65] openssl_2.1.0             rsvd_1.0.5                #>  [67] digest_0.6.33             R6_2.5.1                  #>  [69] textshaping_0.3.6         colorspace_2.1-0          #>  [71] biomaRt_2.57.1            RSQLite_2.3.1             #>  [73] utf8_1.2.3                generics_0.1.3            #>  [75] data.table_1.14.8         rtracklayer_1.61.1        #>  [77] prettyunits_1.1.1         httr_1.4.7                #>  [79] S4Arrays_1.1.5            pkgconfig_2.0.3           #>  [81] gtable_0.3.3              blob_1.2.4                #>  [83] siggenes_1.75.0           htmltools_0.5.6           #>  [85] bookdown_0.35             scales_1.2.1              #>  [87] png_0.1-8                 knitr_1.43                #>  [89] rstudioapi_0.15.0         reshape2_1.4.4            #>  [91] tzdb_0.4.0                rjson_0.2.21              #>  [93] nlme_3.1-163              curl_5.0.2                #>  [95] cachem_1.0.8              rhdf5_2.45.1              #>  [97] stringr_1.5.0             restfulr_0.0.15           #>  [99] desc_1.4.2                GEOquery_2.69.0           #> [101] pillar_1.9.0              grid_4.3.1                #> [103] reshape_0.8.9             vctrs_0.6.3               #> [105] BiocSingular_1.17.1       beachmat_2.17.15          #> [107] dbplyr_2.3.3              xtable_1.8-4              #> [109] evaluate_0.21             readr_2.1.4               #> [111] cli_3.6.1                 compiler_4.3.1            #> [113] Rsamtools_2.17.0          rlang_1.1.1               #> [115] crayon_1.5.2              rngtools_1.5.2            #> [117] nor1mix_1.3-0             mclust_6.0.0              #> [119] plyr_1.8.8                fs_1.6.3                  #> [121] stringi_1.7.12            BiocParallel_1.35.3       #> [123] munsell_0.5.0             PCAtools_2.13.0           #> [125] Matrix_1.6-1              hms_1.1.3                 #> [127] sparseMatrixStats_1.13.4  bit64_4.0.5               #> [129] ggplot2_3.4.3             Rhdf5lib_1.23.0           #> [131] KEGGREST_1.41.0           statmod_1.5.0             #> [133] memoise_2.0.1             bslib_0.5.1               #> [135] bit_4.0.5"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tiffany Eulalio. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eulalio T (2024). regionalpcs: Summarizing Regional Methylation Regional Principal Components Analysis. R package version 0.99.4, https://github.com/tyeulalio/regionalpcs.","code":"@Manual{,   title = {regionalpcs: Summarizing Regional Methylation with Regional Principal Components Analysis},   author = {Tiffany Eulalio},   year = {2024},   note = {R package version 0.99.4},   url = {https://github.com/tyeulalio/regionalpcs}, }"},{"path":[]},{"path":"/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Introduction Installation 3.1 Loading Required Packages 3.2.1 Overview 3.2.2 Inspecting Data 3.3.1 Introduction 3.3.2 Extract Probe Names Positions 3.3.3 Load Illumina 450k Array Probe Positions 3.3.4 Merge Data Frames 3.3.5 Addressing Genome Build Discrepancies 3.4.1 Introduction 3.4.2 Remove Low Variance CpGs 3.4.3 Normalize Methylation Values 3.5.1 Introduction 3.5.2 Load Gene Region Annotations 3.5.3.1 Extract CpG Positions 3.5.3.2 Convert GenomicRanges Find Overlaps 3.5.4.1 Compute Regional PCs 3.5.4.2 Inspecting Output 3.5.4.3 Extracting Viewing Regional PCs 3.5.4.4 Understanding Results","code":""},{"path":"/index.html","id":"regionalpcs-1","dir":"","previous_headings":"","what":"regionalpcs","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Tiffany Eulalio regionalpcs package aims address challenge summarizing interpreting DNA methylation data regional level. Traditional methods analysis may capture biological complexity methylation patterns, potentially leading less accurate less meaningful interpretations. package introduces concept regional principal components (rPCs) tool capturing biologically relevant signals DNA methylation data. using rPCs, researchers can gain new insights complex interactions effects methylation data might otherwise missed.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"can install regionalpcs package Bioconductor using following command: can install development version regionalpcs GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly=TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"regionalpcs\") # install devtool package if needed if (!requireNamespace(\"devtools\", quietly=TRUE))     install.packages(\"devtools\")  # download the regionalpcs package devtools::install_github(\"tyeulalio/regionalpcs\")"},{"path":[]},{"path":"/index.html","id":"loading-required-packages","dir":"","previous_headings":"","what":"Loading Required Packages","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"tutorial depends several Bioconductor packages. packages loaded beginning analysis. , load regionalpcs package, main package ’ll using tutorial. also load RNOmni, provides normalization functions, GenomicRanges, provides tools working genomic intervals, tidyverse, provides suite tools data manipulation visualization. ’s important note need packages installed machine loading . can install using install.packages() function R. packages loaded, can start using functions provided package.","code":"library(regionalpcs) library(RNOmni) library(GenomicRanges) library(IlluminaHumanMethylation450kanno.ilmn12.hg19) library(liftOver) library(magrittr) library(tidyr) library(tibble) library(dplyr)"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"Load the dataset","what":"Overview","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"betas dataset regionalpcs package subset 450k array methylation data TCGA, containing 293 methylation sites 300 samples. ’ll load data R session explore structure.","code":"data(\"betas\", package = \"regionalpcs\")"},{"path":"/index.html","id":"inspecting-the-data","dir":"","previous_headings":"Load the dataset","what":"Inspecting the Data","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"can take quick look dimensions dataset first rows understand structure. Note row names CpG IDs genomic positions, columns contain methylation beta values ranging 0 1 individual samples.","code":"head(betas)[, 1:3] #>                                     TCGA-EJ-7781-11A TCGA-BH-A1FE-11B #> chr16_53434200_53434201_cg00000029        0.20361112       0.13654490 #> chr15_22838620_22838621_cg00000622        0.01311223       0.01024075 #> chr1_166989202_166989203_cg00001349       0.72180841       0.74037266 #> chr8_119416178_119416179_cg00002464       0.05881476       0.05834758 #> chr6_169751536_169751537_cg00005543       0.01868565       0.01808436 #> chr12_52069532_52069533_cg00006122        0.05748535       0.06136361 #>                                     TCGA-BH-A0C3-11A #> chr16_53434200_53434201_cg00000029        0.12996001 #> chr15_22838620_22838621_cg00000622        0.01847991 #> chr1_166989202_166989203_cg00001349       0.76361838 #> chr8_119416178_119416179_cg00002464       0.06189946 #> chr6_169751536_169751537_cg00005543       0.02085631 #> chr12_52069532_52069533_cg00006122        0.05805733 dim(betas) #> [1] 293 300"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"Obtaining Methylation Array Probe Positions","what":"Introduction","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"perform accurate informative analyses methylation array data, critical precise genomic positions probe. IlluminaHumanMethylation450kanno.ilmn12.hg19 package contains annotations 450k methylation arrays, can utilized purpose. section walk steps associate probe dataset genomic position.","code":""},{"path":"/index.html","id":"extract-probe-names-and-positions","dir":"","previous_headings":"Obtaining Methylation Array Probe Positions","what":"Extract Probe Names and Positions","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"First, ’ll extract probe names betas data frame use regular expressions separate CpG identifier genomic position.","code":"# Extract probe names and CpG positions from row names of 'betas' cpg_df <- data.frame(cpgs = rownames(betas)) %>%     separate(cpgs,         into = c(\"cpg_pos\", \"probe\"), sep = \"_(?=[^_]+$)\",         extra = \"merge\"     ) head(cpg_df) #>                    cpg_pos      probe #> 1  chr16_53434200_53434201 cg00000029 #> 2  chr15_22838620_22838621 cg00000622 #> 3 chr1_166989202_166989203 cg00001349 #> 4 chr8_119416178_119416179 cg00002464 #> 5 chr6_169751536_169751537 cg00005543 #> 6  chr12_52069532_52069533 cg00006122"},{"path":"/index.html","id":"load-illumina-450k-array-probe-positions","dir":"","previous_headings":"Obtaining Methylation Array Probe Positions","what":"Load Illumina 450k Array Probe Positions","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Next, let’s load Illumina 450k array probe positions annotation.","code":"data(Locations) probe_positions <- data.frame(Locations) head(probe_positions) #>             chr      pos strand #> cg00050873 chrY  9363356      - #> cg00212031 chrY 21239348      - #> cg00213748 chrY  8148233      - #> cg00214611 chrY 15815688      - #> cg00455876 chrY  9385539      - #> cg01707559 chrY  6778695      +"},{"path":"/index.html","id":"merge-data-frames","dir":"","previous_headings":"Obtaining Methylation Array Probe Positions","what":"Merge Data Frames","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Now, merge extracted probe names Illumina 450k array probe positions.","code":"formatted_probe_positions <- probe_positions %>%     rownames_to_column(\"probe\")  new_cpg_df <- cpg_df %>%     left_join(formatted_probe_positions, by = \"probe\") head(new_cpg_df) #>                    cpg_pos      probe   chr       pos strand #> 1  chr16_53434200_53434201 cg00000029 chr16  53468112      + #> 2  chr15_22838620_22838621 cg00000622 chr15  23034447      + #> 3 chr1_166989202_166989203 cg00001349  chr1 166958439      - #> 4 chr8_119416178_119416179 cg00002464  chr8 120428418      + #> 5 chr6_169751536_169751537 cg00005543  chr6 170151632      + #> 6  chr12_52069532_52069533 cg00006122 chr12  52463316      +"},{"path":"/index.html","id":"addressing-genome-build-discrepancies","dir":"","previous_headings":"Obtaining Methylation Array Probe Positions","what":"Addressing Genome Build Discrepancies","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"’s critical ensure genome builds match across datasets. example, ’ll use GenomicRanges liftOver packages convert genomic positions hg19 hg38. ’s quick example lift positions one build another. Always ensure working correct genome build build matches across datasets, else run big issues! need chain file lift genomic positions. chain file annotation file links positions genome builds. can download file (UCSC golden path download site)[https://hgdownload.cse.ucsc.edu/goldenpath/hg19/liftOver/]. sure download file maps appropriate builds. ’ll mapping hg19 hg38. ’ve included chain used analysis part regionalpcs package, can accessed “extdata” folder shown code . Now accurate genomic positions probe harmonized genome builds, can proceed preprocessing methylation data.","code":"# Convert hg19 positions into a GenomicRanges object hg19_pos <- new_cpg_df %>%     select(\"chr\", \"pos\", \"strand\", \"probe\") %>%     mutate(start = pos, end = pos + 1)  hg19_pos_gr <- makeGRangesFromDataFrame(hg19_pos, keep.extra.columns = TRUE)  # Load chain file and liftOver positions chain_file <- system.file(\"extdata\", \"hg19ToHg38.over.chain\",     package = \"regionalpcs\" ) print(paste(\"Using chain file for liftOver\", chain_file)) #> [1] \"Using chain file for liftOver C:/Users/tyeul/AppData/Local/R/win-library/4.3/regionalpcs/extdata/hg19ToHg38.over.chain\" print(file.exists(chain_file)) #> [1] TRUE chain <- import.chain(chain_file)  hg38_pos <- liftOver(hg19_pos_gr, chain) %>%     as.data.frame()  # Merge the lifted positions back to the original data frame formatted_hg38 <- hg38_pos %>%     select(chrom_hg38 = seqnames, pos_hg38 = start, probe)  lifted_cpg_df <- new_cpg_df %>%     left_join(formatted_hg38, by = \"probe\") head(lifted_cpg_df) #>                    cpg_pos      probe   chr       pos strand chrom_hg38 #> 1  chr16_53434200_53434201 cg00000029 chr16  53468112      +      chr16 #> 2  chr15_22838620_22838621 cg00000622 chr15  23034447      +      chr15 #> 3 chr1_166989202_166989203 cg00001349  chr1 166958439      -       chr1 #> 4 chr8_119416178_119416179 cg00002464  chr8 120428418      +       chr8 #> 5 chr6_169751536_169751537 cg00005543  chr6 170151632      +       chr6 #> 6  chr12_52069532_52069533 cg00006122 chr12  52463316      +      chr12 #>    pos_hg38 #> 1  53434200 #> 2  22838620 #> 3 166989202 #> 4 119416178 #> 5 169751536 #> 6  52069532"},{"path":[]},{"path":"/index.html","id":"introduction-1","dir":"","previous_headings":"Processing and Filtering Methylation Data","what":"Introduction","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"conducting downstream analyses, essential preprocess clean methylation data. section, ’ll walk steps remove low variance CpGs normalize methylation beta values.","code":""},{"path":"/index.html","id":"remove-low-variance-cpgs","dir":"","previous_headings":"Processing and Filtering Methylation Data","what":"Remove Low Variance CpGs","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Firstly, aim filter low variance CpGs. Variability crucial factor, low variance CpGs may provide much information downstream analyses. section, ’ll remove low variance CpGs normalize methylation beta values using inverse normal transform. remove CpGs zero variance example. can adjust threshold according requirements specific analysis.","code":"# Remove CpGs with zero variance var_betas <- betas[apply(betas, 1, var, na.rm = TRUE) != 0, ] %>%     na.omit() dim(var_betas) #> [1] 293 300"},{"path":"/index.html","id":"normalize-methylation-values","dir":"","previous_headings":"Processing and Filtering Methylation Data","what":"Normalize Methylation Values","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Methylation data often exhibit heteroscedasticity. Therefore, ’ll normalize beta values using inverse normal transformation. , ’ll use RankNorm function RNOmni package. preprocessing steps, dataset ready downstream analysis regionalpcs package. ’ll cover perform analyses subsequent sections tutorial.","code":"# Apply inverse normal transformation to methylation beta values int_meth <- apply(var_betas, 1, RankNorm) %>%     t() %>%     as.data.frame()"},{"path":[]},{"path":"/index.html","id":"introduction-2","dir":"","previous_headings":"Summarizing Gene Region Types","what":"Introduction","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Gene regions significant functional units genome, promoters, gene bodies, intergenic regions. ’ll focus summarizing regions prepare downstream analyses. use regionalpcs package perform tasks.","code":""},{"path":"/index.html","id":"load-gene-region-annotations","dir":"","previous_headings":"Summarizing Gene Region Types","what":"Load Gene Region Annotations","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"First, let’s load gene region annotations. Make sure align genomic builds annotations methylation data. annotations included regionalpcs package build hg38. gene_annots dataset includes annotations various gene regions.","code":"# Load the gene region annotation file data(\"gene_annots\", package = \"regionalpcs\") head(gene_annots) #> # A tibble: 6 × 16 #>   seqnames   start     end width strand tx_id             type   gencode_gene_id #>   <chr>      <dbl>   <dbl> <dbl> <chr>  <chr>             <chr>  <chr>           #> 1 chr1      922928  923927  1000 +      ENST00000420190.6 hg38_… ENSG0000018763… #> 2 chr1      959584  960583  1000 +      ENST00000338591.8 hg38_… ENSG0000018796… #> 3 chr1      965482  966481  1000 +      ENST00000379410.8 hg38_… ENSG0000018758… #> 4 chr1     1000138 1001137  1000 +      ENST00000624697.4 hg38_… ENSG0000018760… #> 5 chr1     1019120 1020119  1000 +      ENST00000379370.7 hg38_… ENSG0000018815… #> 6 chr1     1172903 1173902  1000 +      ENST00000379290.5 hg38_… ENSG0000016257… #> # ℹ 8 more variables: gencode_gene_type <chr>, gencode_gene_name <chr>, #> #   transcript_type <chr>, transcript_name <chr>, #> #   transcript_support_level <dbl>, tag <chr>, is_canonical <lgl>, #> #   gencode_region <chr>"},{"path":"/index.html","id":"create-a-region-map","dir":"","previous_headings":"Summarizing Gene Region Types","what":"Create a Region Map","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"summarizing gene regions using compute_regional_pcs, need create region map assigns CpGs gene regions. map enables us identify CpGs fall gene region.","code":""},{"path":"/index.html","id":"extract-cpg-positions","dir":"","previous_headings":"Summarizing Gene Region Types > Create a Region Map","what":"Extract CpG Positions","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Start extracting CpG positions methylation data frame’s row names.","code":"head(int_meth)[1:4] #>                                     TCGA-EJ-7781-11A TCGA-BH-A1FE-11B #> chr16_53434200_53434201_cg00000029       -0.38948253       -0.9465265 #> chr15_22838620_22838621_cg00000622       -0.03757696       -1.1171114 #> chr1_166989202_166989203_cg00001349      -0.87083034       -0.6274087 #> chr8_119416178_119416179_cg00002464       0.13818831        0.1045460 #> chr6_169751536_169751537_cg00005543       0.38049184        0.2488238 #> chr12_52069532_52069533_cg00006122        0.27474294        0.6274087 #>                                     TCGA-BH-A0C3-11A TCGA-E9-A1N6-11A #> chr16_53434200_53434201_cg00000029        -1.1171114       -1.4370361 #> chr15_22838620_22838621_cg00000622         1.2160129       -0.6376059 #> chr1_166989202_166989203_cg00001349       -0.3894825        0.3894825 #> chr8_119416178_119416179_cg00002464        0.2402219       -0.2574441 #> chr6_169751536_169751537_cg00005543        0.9080280       -1.5657713 #> chr12_52069532_52069533_cg00006122         0.3271598       -0.1129440 # Extract CpG information cpg_info <- data.frame(cpg_id = rownames(int_meth)) %>%     separate(cpg_id,         into = c(\"chrom\", \"start\", \"end\", \"cpg_name\"),         sep = \"_\", remove = FALSE     ) head(cpg_info) #>                                cpg_id chrom     start       end   cpg_name #> 1  chr16_53434200_53434201_cg00000029 chr16  53434200  53434201 cg00000029 #> 2  chr15_22838620_22838621_cg00000622 chr15  22838620  22838621 cg00000622 #> 3 chr1_166989202_166989203_cg00001349  chr1 166989202 166989203 cg00001349 #> 4 chr8_119416178_119416179_cg00002464  chr8 119416178 119416179 cg00002464 #> 5 chr6_169751536_169751537_cg00005543  chr6 169751536 169751537 cg00005543 #> 6  chr12_52069532_52069533_cg00006122 chr12  52069532  52069533 cg00006122"},{"path":"/index.html","id":"convert-to-genomicranges-and-find-overlaps","dir":"","previous_headings":"Summarizing Gene Region Types > Create a Region Map","what":"Convert to GenomicRanges and Find Overlaps","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Next, ’ll use GenomicRanges package find overlaps CpGs gene regions. steps, ’ll region map assigns CpGs specific gene regions, can essential downstream analyses.","code":"# Convert to GenomicRanges cpg_gr <- makeGRangesFromDataFrame(cpg_info, keep.extra.columns = TRUE) annots_gr <- makeGRangesFromDataFrame(gene_annots, keep.extra.columns = TRUE)  # Find overlaps between the two GRanges objects overlaps <- findOverlaps(query = cpg_gr, subject = annots_gr) %>%     as.data.frame() head(overlaps) #>   queryHits subjectHits #> 1         1       12678 #> 2         2       11904 #> 3         3         679 #> 4         4        7360 #> 5         5        5877 #> 6         6       10306  # Match overlaps matched_cpg <- cpg_gr[overlaps$queryHits, ] %>%     as.data.frame() %>%     select(cpg_id)  # Select overlapped rows and just keep the columns we need matched_annots <- annots_gr[overlaps$subjectHits, ] %>%     as.data.frame() %>%     select(gencode_gene_id)  # Combine the matched CpGs and gene annotations to form the region map region_map <- cbind(matched_annots, matched_cpg) head(region_map) #>      gencode_gene_id                              cpg_id #> 1 ENSG00000103479.16  chr16_53434200_53434201_cg00000029 #> 2 ENSG00000140157.14  chr15_22838620_22838621_cg00000622 #> 3 ENSG00000143194.13 chr1_166989202_166989203_cg00001349 #> 4  ENSG00000136999.5 chr8_119416178_119416179_cg00002464 #> 5 ENSG00000130023.16 chr6_169751536_169751537_cg00005543 #> 6 ENSG00000123395.14  chr12_52069532_52069533_cg00006122 length(unique(region_map$gencode_gene_id)) #> [1] 52"},{"path":"/index.html","id":"summarizing-gene-regions-with-regional-principal-components","dir":"","previous_headings":"Summarizing Gene Region Types","what":"Summarizing Gene Regions with Regional Principal Components","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"final section, ’ll summarize gene regions using Principal Components (PCs) capture maximum variation. ’ll utilize compute_regional_pcs function regionalpcs package .","code":""},{"path":"/index.html","id":"compute-regional-pcs","dir":"","previous_headings":"Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Compute Regional PCs","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"Let’s calculate regional PCs using subset gene regions demonstration purposes.","code":"# Display head of region map head(region_map) #>      gencode_gene_id                              cpg_id #> 1 ENSG00000103479.16  chr16_53434200_53434201_cg00000029 #> 2 ENSG00000140157.14  chr15_22838620_22838621_cg00000622 #> 3 ENSG00000143194.13 chr1_166989202_166989203_cg00001349 #> 4  ENSG00000136999.5 chr8_119416178_119416179_cg00002464 #> 5 ENSG00000130023.16 chr6_169751536_169751537_cg00005543 #> 6 ENSG00000123395.14  chr12_52069532_52069533_cg00006122  # Subset the region map sub_region_map <- region_map %>%     filter(gencode_gene_id %in% unique(region_map$gencode_gene_id)[1:1000])  # Compute regional PCs res <- compute_regional_pcs(int_meth, sub_region_map) #> Using Gavish-Donoho method"},{"path":"/index.html","id":"inspecting-the-output","dir":"","previous_headings":"Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Inspecting the Output","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"function returns list containing multiple elements. Let’s first look elements .","code":"# Inspect the output list elements names(res) #> [1] \"regional_pcs\"     \"percent_variance\" \"loadings\"         \"info\""},{"path":"/index.html","id":"extracting-and-viewing-regional-pcs","dir":"","previous_headings":"Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Extracting and Viewing Regional PCs","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"first element (res$regional_pcs) data frame containing calculated regional PCs.","code":"# Extract regional PCs regional_pcs <- res$regional_pcs head(regional_pcs)[1:4] #>                        TCGA-EJ-7781-11A TCGA-BH-A1FE-11B TCGA-BH-A0C3-11A #> ENSG00000103479.16-PC1       -0.8210157      -1.60659103       -1.0541882 #> ENSG00000140157.14-PC1       -0.1392372      -1.47241611        1.3317941 #> ENSG00000143194.13-PC1       -1.7895014      -3.07334567       -3.1270943 #> ENSG00000136999.5-PC1         0.4498687       0.11381324       -0.3555689 #> ENSG00000130023.16-PC1       -0.1838917       0.05055839       -0.8546051 #> ENSG00000123395.14-PC1       -1.1961240       0.36432710        0.7234163 #>                        TCGA-E9-A1N6-11A #> ENSG00000103479.16-PC1       -1.6169547 #> ENSG00000140157.14-PC1       -0.6519472 #> ENSG00000143194.13-PC1       -1.0122026 #> ENSG00000136999.5-PC1         1.2443734 #> ENSG00000130023.16-PC1        2.1260186 #> ENSG00000123395.14-PC1        1.3592205"},{"path":"/index.html","id":"understanding-the-results","dir":"","previous_headings":"Summarizing Gene Region Types > Summarizing Gene Regions with Regional Principal Components","what":"Understanding the Results","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"output data frame regional PCs region rows samples columns. new representation methylation values, now gene regional PC scale. can feed downstream analyses . number regional PCs representing gene region determined Gavish-Donoho method. method allows us identify PCs capture actual signal data noise inherent dataset. explore alternative methods, can change pc_method parameter. summarized genes using just one PC. number PCs depends three main factors: number samples, number CpGs gene region, noise methylation data. default, compute_regional_pcs function uses Gavish-Donoho method. However, can also use Marcenko-Pasteur method setting pc_method parameter: Marcenko-Pasteur Gavish-Donoho methods based Random Matrix Theory, aim identify number significant PCs capture true signal data just noise. However, methods differ select number significant PCs. Marcenko-Pasteur method typically selects PCs represent gene region compared Gavish-Donoho method. may due different ways two methods estimate noise level data. Ultimately, choice two methods depends specific needs goals analysis. Gavish-Donoho method tends provide conservative results, Marcenko-Pasteur method may capture underlying signal data. Researchers carefully consider objectives characteristics data selecting method.","code":"# Count the number of unique gene regions and PCs regions <- data.frame(gene_pc = rownames(regional_pcs)) %>%     separate(gene_pc, into = c(\"gene\", \"pc\"), sep = \"-\") head(regions) #>                 gene  pc #> 1 ENSG00000103479.16 PC1 #> 2 ENSG00000140157.14 PC1 #> 3 ENSG00000143194.13 PC1 #> 4  ENSG00000136999.5 PC1 #> 5 ENSG00000130023.16 PC1 #> 6 ENSG00000123395.14 PC1  # number of genes that have been summarized length(unique(regions$gene)) #> [1] 52  # how many of each PC did we get table(regions$pc) #>  #> PC1  #>  52 # Using Marcenko-Pasteur method mp_res <- compute_regional_pcs(int_meth, sub_region_map, pc_method = \"mp\") #> Using Marchenko-Pastur method  # select the regional pcs mp_regional_pcs <- mp_res$regional_pcs  # separate the genes from the pc numbers mp_regions <- data.frame(gene_pc = rownames(mp_regional_pcs)) %>%     separate(gene_pc, into = c(\"gene\", \"pc\"), sep = \"-\") head(mp_regions) #>                 gene  pc #> 1 ENSG00000103479.16 PC1 #> 2 ENSG00000103479.16 PC2 #> 3 ENSG00000140157.14 PC1 #> 4 ENSG00000140157.14 PC2 #> 5 ENSG00000143194.13 PC1 #> 6 ENSG00000143194.13 PC2  # number of genes that have been summarized length(unique(mp_regions$gene)) #> [1] 52  # how many of each PC did we get table(mp_regions$pc) #>  #> PC1 PC2  #>  52  26"},{"path":"/index.html","id":"session-information","dir":"","previous_headings":"","what":"Session Information","title":"Summarizing Regional Methylation with Regional Principal Components Analysis","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16 ucrt) #> Platform: x86_64-w64-mingw32/x64 (64-bit) #> Running under: Windows 10 x64 (build 19045) #>  #> Matrix products: default #>  #>  #> locale: #> [1] LC_COLLATE=English_United States.utf8  #> [2] LC_CTYPE=English_United States.utf8    #> [3] LC_MONETARY=English_United States.utf8 #> [4] LC_NUMERIC=C                           #> [5] LC_TIME=English_United States.utf8     #>  #> time zone: America/Los_Angeles #> tzcode source: internal #>  #> attached base packages: #> [1] parallel  stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] dplyr_1.1.2                                        #>  [2] tibble_3.2.1                                       #>  [3] tidyr_1.3.0                                        #>  [4] magrittr_2.0.3                                     #>  [5] liftOver_1.25.0                                    #>  [6] Homo.sapiens_1.3.1                                 #>  [7] TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2            #>  [8] org.Hs.eg.db_3.17.0                                #>  [9] GO.db_3.17.0                                       #> [10] OrganismDbi_1.43.0                                 #> [11] GenomicFeatures_1.53.1                             #> [12] AnnotationDbi_1.63.2                               #> [13] rtracklayer_1.61.1                                 #> [14] gwascat_2.33.0                                     #> [15] IlluminaHumanMethylation450kanno.ilmn12.hg19_0.6.1 #> [16] minfi_1.47.0                                       #> [17] bumphunter_1.43.0                                  #> [18] locfit_1.5-9.8                                     #> [19] iterators_1.0.14                                   #> [20] foreach_1.5.2                                      #> [21] Biostrings_2.69.2                                  #> [22] XVector_0.41.1                                     #> [23] SummarizedExperiment_1.31.1                        #> [24] Biobase_2.61.0                                     #> [25] MatrixGenerics_1.13.1                              #> [26] matrixStats_1.0.0                                  #> [27] GenomicRanges_1.53.1                               #> [28] GenomeInfoDb_1.37.2                                #> [29] IRanges_2.35.2                                     #> [30] S4Vectors_0.39.1                                   #> [31] BiocGenerics_0.47.0                                #> [32] RNOmni_1.0.1                                       #> [33] regionalpcs_0.99.1                                 #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.3.1             BiocIO_1.11.0             #>   [3] bitops_1.0-7              filelock_1.0.2            #>   [5] preprocessCore_1.63.1     graph_1.79.0              #>   [7] XML_3.99-0.14             lifecycle_1.0.3           #>   [9] lattice_0.21-8            MASS_7.3-60               #>  [11] base64_2.0.1              scrime_1.3.5              #>  [13] limma_3.57.7              rmarkdown_2.24            #>  [15] yaml_2.3.7                doRNG_1.8.6               #>  [17] askpass_1.1               cowplot_1.1.1             #>  [19] DBI_1.1.3                 RColorBrewer_1.1-3        #>  [21] abind_1.4-5               zlibbioc_1.47.0           #>  [23] quadprog_1.5-8            purrr_1.0.2               #>  [25] RCurl_1.98-1.12           VariantAnnotation_1.47.1  #>  [27] rappdirs_0.3.3            GenomeInfoDbData_1.2.10   #>  [29] RMTstat_0.3.1             ggrepel_0.9.3             #>  [31] irlba_2.3.5.1             genefilter_1.83.1         #>  [33] dqrng_0.3.0               annotate_1.79.0           #>  [35] DelayedMatrixStats_1.23.4 codetools_0.2-19          #>  [37] DelayedArray_0.27.10      xml2_1.3.5                #>  [39] tidyselect_1.2.0          ScaledMatrix_1.9.1        #>  [41] beanplot_1.3.1            BiocFileCache_2.9.1       #>  [43] illuminaio_0.43.0         GenomicAlignments_1.37.0  #>  [45] multtest_2.57.0           survival_3.5-7            #>  [47] tools_4.3.1               progress_1.2.2            #>  [49] Rcpp_1.0.11               glue_1.6.2                #>  [51] SparseArray_1.1.11        xfun_0.40                 #>  [53] HDF5Array_1.29.3          withr_2.5.0               #>  [55] BiocManager_1.30.22       fastmap_1.1.1             #>  [57] rhdf5filters_1.13.5       fansi_1.0.4               #>  [59] openssl_2.1.0             rsvd_1.0.5                #>  [61] digest_0.6.33             R6_2.5.1                  #>  [63] colorspace_2.1-0          biomaRt_2.57.1            #>  [65] RSQLite_2.3.1             utf8_1.2.3                #>  [67] generics_0.1.3            data.table_1.14.8         #>  [69] prettyunits_1.1.1         httr_1.4.7                #>  [71] S4Arrays_1.1.5            pkgconfig_2.0.3           #>  [73] gtable_0.3.3              blob_1.2.4                #>  [75] siggenes_1.75.0           htmltools_0.5.6           #>  [77] RBGL_1.77.1               scales_1.2.1              #>  [79] png_0.1-8                 knitr_1.43                #>  [81] rstudioapi_0.15.0         reshape2_1.4.4            #>  [83] tzdb_0.4.0                rjson_0.2.21              #>  [85] nlme_3.1-163              curl_5.0.2                #>  [87] cachem_1.0.8              rhdf5_2.45.1              #>  [89] stringr_1.5.0             restfulr_0.0.15           #>  [91] GEOquery_2.69.0           pillar_1.9.0              #>  [93] grid_4.3.1                reshape_0.8.9             #>  [95] vctrs_0.6.3               BiocSingular_1.17.1       #>  [97] beachmat_2.17.15          dbplyr_2.3.3              #>  [99] xtable_1.8-4              evaluate_0.21             #> [101] readr_2.1.4               cli_3.6.1                 #> [103] compiler_4.3.1            Rsamtools_2.17.0          #> [105] rlang_1.1.1               crayon_1.5.2              #> [107] rngtools_1.5.2            nor1mix_1.3-0             #> [109] mclust_6.0.0              plyr_1.8.8                #> [111] stringi_1.7.12            BiocParallel_1.35.3       #> [113] munsell_0.5.0             PCAtools_2.13.0           #> [115] Matrix_1.6-1              BSgenome_1.69.0           #> [117] hms_1.1.3                 sparseMatrixStats_1.13.4  #> [119] bit64_4.0.5               ggplot2_3.4.3             #> [121] Rhdf5lib_1.23.0           KEGGREST_1.41.0           #> [123] statmod_1.5.0             memoise_2.0.1             #> [125] snpStats_1.51.0           bit_4.0.5"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 regionalpcs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/combine_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine results dataframes across regions — combine_results","title":"Combine results dataframes across regions — combine_results","text":"Combine results dataframes across regions","code":""},{"path":"/reference/combine_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine results dataframes across regions — combine_results","text":"","code":"combine_results(res, df_name)"},{"path":"/reference/combine_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine results dataframes across regions — combine_results","text":"res List lists; contains summarized region results df_name String; name result combined (sig_pcs percent_var)","code":""},{"path":"/reference/combine_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine results dataframes across regions — combine_results","text":"Data Frame containing results","code":""},{"path":"/reference/combine_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine results dataframes across regions — combine_results","text":"","code":"# Create example data for 'sig_pcs' and 'percent_var'     sig_pcs_example <- data.frame(pcs = c(\"PC1\", \"PC2\"), value = c(0.2, 0.4)) percent_var_example <- data.frame(pcs = c(\"PC1\", \"PC2\"), value = c(0.7, 0.3))  # Create 'res' list containing both 'sig_pcs' and 'percent_var' res <- list(region = \"Region1\", sig_pcs = sig_pcs_example, percent_var = percent_var_example)  # Example function use: Combine 'sig_pcs' across regions combined_sig_pcs <- combine_results(res, df_name = \"sig_pcs\") print(combined_sig_pcs) #>                V1  V2 #> Region1-pcs   PC1 PC2 #> Region1-value 0.2 0.4"},{"path":"/reference/compute_dimension.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute significant dimensions of a matrix\r\nusing the Marchenko-Pastur or Gavish-Donoho methods — compute_dimension","title":"Compute significant dimensions of a matrix\r\nusing the Marchenko-Pastur or Gavish-Donoho methods — compute_dimension","text":"Compute significant dimensions matrix using Marchenko-Pastur Gavish-Donoho methods","code":""},{"path":"/reference/compute_dimension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute significant dimensions of a matrix\r\nusing the Marchenko-Pastur or Gavish-Donoho methods — compute_dimension","text":"","code":"compute_dimension(   x,   var_explained,   noise_select,   pc_method = c(\"gd\", \"mp\"),   verbose = FALSE )"},{"path":"/reference/compute_dimension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute significant dimensions of a matrix\r\nusing the Marchenko-Pastur or Gavish-Donoho methods — compute_dimension","text":"x data frame matrix methylation values; rows = features, columns = samples var_explained numeric vector containing variance explained successive PCs, sorted decreasing order. (Used PCAtools) noise_select Numeric scalar specifying variance random noise (Used PCAtools) pc_method String indicating method estimating dimension; \"gd\" = Gavish-Donoho, \"mp\" = Marchenko-Pastur verbose Boolean indicating whether print statements running, default = FALSE","code":""},{"path":"/reference/compute_dimension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute significant dimensions of a matrix\r\nusing the Marchenko-Pastur or Gavish-Donoho methods — compute_dimension","text":"Numeric scalar representing optimal number PCs retain using specified method","code":""},{"path":"/reference/compute_dimension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute significant dimensions of a matrix\r\nusing the Marchenko-Pastur or Gavish-Donoho methods — compute_dimension","text":"","code":"x <- diag(4) pca_res <- PCAtools::pca(x) # Run PCA eig_sq <- pca_res$sdev^2 # Compute variance explained compute_dimension(x, eig_sq, 1, \"gd\") #> [1] 1 #> attr(,\"limit\") #> [1] 7.111111"},{"path":"/reference/compute_regional_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute regional principal components for methylation data — compute_regional_pcs","title":"Compute regional principal components for methylation data — compute_regional_pcs","text":"Compute regional principal components methylation data","code":""},{"path":"/reference/compute_regional_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute regional principal components for methylation data — compute_regional_pcs","text":"","code":"compute_regional_pcs(   meth,   region_map,   pc_method = c(\"gd\", \"mp\"),   verbose = FALSE )"},{"path":"/reference/compute_regional_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute regional principal components for methylation data — compute_regional_pcs","text":"meth Data frame methylation beta values, CpGs rows samples columns region_map Data frame mapping CpGs gene regions pc_method Method use PC computation, either 'gd' (Gavish-Donoho) 'mp' (Marchenko-Pastur) verbose Logical, progress messages displayed?","code":""},{"path":"/reference/compute_regional_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute regional principal components for methylation data — compute_regional_pcs","text":"list containing several elements, including regional PCs, percent variance, information","code":""},{"path":"/reference/compute_regional_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute regional principal components for methylation data — compute_regional_pcs","text":"","code":"# Create synthetic methylation data meth_data <- matrix(rnorm(1000), nrow = 100, ncol = 10) rownames(meth_data) <- paste0(\"CpG\", 1:100) colnames(meth_data) <- paste0(\"Sample\", 1:10)  # Create a synthetic region map region_map_data <- data.frame(     region_id = rep(c(\"Gene1\", \"Gene2\"), each = 50),     cpg_id = rownames(meth_data) )  # Run the function compute_regional_pcs(meth_data, region_map_data, pc_method = 'gd') #> Using Gavish-Donoho method #> $regional_pcs #>             Sample1    Sample2   Sample3   Sample4   Sample5   Sample6  Sample7 #> Gene1-PC1 -2.580717 -3.2693801  2.326065  1.447216 -4.787505  2.895122 3.404681 #> Gene2-PC1 -2.977420  0.5961535 -4.432179 -1.392115  5.880181 -1.971666 1.270327 #>            Sample8   Sample9  Sample10 #> Gene1-PC1 4.597906 -1.285160 -2.748228 #> Gene2-PC1 3.954187  2.247911 -3.175380 #>  #> $percent_variance #>           percent_variance_explained #> Gene1-PC1                  0.2147648 #> Gene2-PC1                  0.2226784 #>  #> $loadings #> $loadings$Gene1 #>                PC1 #> CpG1   0.136356580 #> CpG2  -0.012124953 #> CpG3   0.014888727 #> CpG4   0.246907998 #> CpG5   0.134151824 #> CpG6   0.163050030 #> CpG7  -0.169395251 #> CpG8  -0.137613211 #> CpG9  -0.091300327 #> CpG10 -0.141907980 #> CpG11  0.054908262 #> CpG12  0.004991858 #> CpG13 -0.052716903 #> CpG14  0.220929376 #> CpG15 -0.129149616 #> CpG16 -0.093748108 #> CpG17  0.077864499 #> CpG18 -0.114104634 #> CpG19  0.050415035 #> CpG20  0.218468507 #> CpG21  0.265436760 #> CpG22  0.069873367 #> CpG23  0.104974102 #> CpG24 -0.044154526 #> CpG25  0.072656969 #> CpG26  0.012565498 #> CpG27  0.161565265 #> CpG28  0.154100403 #> CpG29 -0.152848894 #> CpG30  0.026775014 #> CpG31  0.146802605 #> CpG32  0.060946637 #> CpG33 -0.046413766 #> CpG34  0.081218430 #> CpG35 -0.028868971 #> CpG36  0.089020570 #> CpG37 -0.007499191 #> CpG38 -0.249480086 #> CpG39  0.367478488 #> CpG40  0.071030352 #> CpG41 -0.005430531 #> CpG42  0.034216259 #> CpG43 -0.181075108 #> CpG44 -0.044398006 #> CpG45 -0.121026734 #> CpG46  0.059029971 #> CpG47 -0.176992989 #> CpG48 -0.173951036 #> CpG49  0.175717781 #> CpG50  0.300917721 #>  #> $loadings$Gene2 #>                 PC1 #> CpG51  -0.066303061 #> CpG52  -0.212117899 #> CpG53  -0.038541483 #> CpG54  -0.293210594 #> CpG55   0.313687042 #> CpG56   0.040318222 #> CpG57   0.091889040 #> CpG58   0.010822202 #> CpG59  -0.074140783 #> CpG60  -0.070664976 #> CpG61  -0.094225492 #> CpG62  -0.215506275 #> CpG63   0.019726454 #> CpG64  -0.330429094 #> CpG65   0.007675132 #> CpG66  -0.167160767 #> CpG67  -0.020794257 #> CpG68   0.017044538 #> CpG69  -0.006596880 #> CpG70  -0.119377349 #> CpG71  -0.149644946 #> CpG72  -0.093335895 #> CpG73   0.037982610 #> CpG74  -0.015700945 #> CpG75  -0.031811171 #> CpG76  -0.118294659 #> CpG77  -0.076810221 #> CpG78  -0.063127892 #> CpG79  -0.022781771 #> CpG80   0.072786470 #> CpG81   0.041850966 #> CpG82  -0.032150612 #> CpG83   0.081351100 #> CpG84   0.019774832 #> CpG85   0.012419445 #> CpG86   0.159022326 #> CpG87  -0.178428197 #> CpG88   0.436757275 #> CpG89  -0.070221497 #> CpG90   0.061088279 #> CpG91  -0.017644281 #> CpG92   0.040797945 #> CpG93   0.216858000 #> CpG94  -0.056274842 #> CpG95  -0.059216233 #> CpG96  -0.047034356 #> CpG97  -0.086866750 #> CpG98   0.254061800 #> CpG99   0.073363060 #> CpG100  0.266090041 #>  #>  #> $info #>      region  est_dim num_cpgs #> [1,] \"Gene1\" 1       50       #> [2,] \"Gene2\" 1       50       #>"},{"path":"/reference/create_region_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Region Map Between CpGs and Gene Regions — create_region_map","title":"Create a Region Map Between CpGs and Gene Regions — create_region_map","text":"function generates map assigns CpG sites gene regions, establishing linkage based genomic coordinates providing foundation subsequent region-specific analyses.","code":""},{"path":"/reference/create_region_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Region Map Between CpGs and Gene Regions — create_region_map","text":"","code":"create_region_map(cpg_gr, genes_gr, verbose = FALSE)"},{"path":"/reference/create_region_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Region Map Between CpGs and Gene Regions — create_region_map","text":"cpg_gr GRanges object containing genomic positions CpG sites. genes_gr GRanges object containing genomic positions gene regions (e.g., promoters) interest. verbose Boolean; print output statements","code":""},{"path":"/reference/create_region_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Region Map Between CpGs and Gene Regions — create_region_map","text":"data.frame mappings gene IDs CpG IDs, facilitating associating CpG sites corresponding gene regions downstream analyses.","code":""},{"path":"/reference/create_region_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Region Map Between CpGs and Gene Regions — create_region_map","text":"","code":"library(GenomicRanges) #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     I, expand.grid, unname #> Loading required package: IRanges #>  #> Attaching package: 'IRanges' #> The following object is masked from 'package:grDevices': #>  #>     windows #> Loading required package: GenomeInfoDb  # Creating dummy GRanges objects for CpG sites and gene regions cpg_gr <- GRanges(seqnames=c(\"chr1\", \"chr1\", \"chr2\"),                     ranges=IRanges(start=c(100, 200, 150),                     end=c(100, 200, 150))) genes_gr <- GRanges(seqnames=c(\"chr1\", \"chr2\", \"chr2\"),                     ranges=IRanges(start=c(50, 100, 130),                     end=c(150, 180, 160))) # Creating a region map using the function region_map <- create_region_map(cpg_gr, genes_gr) #> Warning: 'cpg_gr' does not have names, assigning default names. #> Warning: 'genes_gr' does not have names, assigning default names."},{"path":"/reference/get_sig_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get significant principal components — get_sig_pcs","title":"Get significant principal components — get_sig_pcs","text":"Get significant principal components","code":""},{"path":"/reference/get_sig_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get significant principal components — get_sig_pcs","text":"","code":"get_sig_pcs(x, pc_method = c(\"mp\", \"gd\"), verbose = FALSE)"},{"path":"/reference/get_sig_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get significant principal components — get_sig_pcs","text":"x data frame matrix methylation values; rows = features, columns = samples pc_method String indicating method estimating dimension; \"gd\" = Gavish-Donoho (default), \"mp\" = Marchenko-Pastur verbose Boolean; print output statements","code":""},{"path":"/reference/get_sig_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get significant principal components — get_sig_pcs","text":"List containing four elements; sig_pcs = significant PCs, percent_var = percent variance explained, loadings = PC loadings, est_dim = estimated dimension","code":""},{"path":"/reference/get_sig_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get significant principal components — get_sig_pcs","text":"","code":"x <- diag(4) get_sig_pcs(x, \"gd\") #> $sig_pcs #>             PC1 #> 1  6.952263e-17 #> 2  7.715167e-01 #> 3 -1.543033e-01 #> 4 -6.172134e-01 #>  #> $percent_var #>                                  PC1 #> percent_variance_explained 0.3333333 #>  #> $loadings #>             PC1 #> 1  5.192593e-17 #> 2  7.715167e-01 #> 3 -1.543033e-01 #> 4 -6.172134e-01 #>  #> $est_dim #> [1] 1 #>"},{"path":"/reference/summarize_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a region using regional principal components — summarize_region","title":"Summarize a region using regional principal components — summarize_region","text":"Summarize region using regional principal components","code":""},{"path":"/reference/summarize_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a region using regional principal components — summarize_region","text":"","code":"summarize_region(region, region_map, meth, pc_method, verbose = FALSE)"},{"path":"/reference/summarize_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a region using regional principal components — summarize_region","text":"region String; name region processed region_map Data frame; Mapping CpGs regions, column 1 regions, column 2 CpGs names rows meth meth Data frame matrix; Methylation values summarize; rows=CpGs, columns=samples pc_method String; indicating method estimating dimension; \"gd\"=Gavish-Donoho (default), \"mp\"=Marchenko-Pastur verbose Boolean; print output statements","code":""},{"path":"/reference/summarize_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a region using regional principal components — summarize_region","text":"list containing PC results","code":""},{"path":"/reference/summarize_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a region using regional principal components — summarize_region","text":"","code":"# Create the region map with just one region containing 10 CpGs region_map <- data.frame(region_id = rep(1, 10), cpg_id = seq(1, 10))  # Create methylation data frame set.seed(123) meth <- as.data.frame(matrix(runif(10 * 20, min = 0, max = 1), nrow = 10)) rownames(meth) <- seq(1, 10)  # Call the function summarize_region(1, region_map, meth, 'gd') #> $sig_pcs #>              PC1 #> V1  -0.564912548 #> V2   0.715951191 #> V3  -0.336531053 #> V4  -0.058331274 #> V5   0.470009961 #> V6   0.004381512 #> V7  -0.254467804 #> V8   0.127777677 #> V9  -0.720377570 #> V10  0.062732873 #> V11 -0.415496705 #> V12 -0.508541629 #> V13  0.850919298 #> V14 -0.589314206 #> V15  0.644142819 #> V16  0.276779506 #> V17  0.149794967 #> V18 -0.100766203 #> V19  0.236932180 #> V20  0.009317009 #>  #> $percent_var #>                                  PC1 #> percent_variance_explained 0.2617874 #>  #> $loadings #>            PC1 #> 1   0.02704484 #> 2  -0.16219089 #> 3  -0.04079215 #> 4  -0.46213734 #> 5  -0.17035293 #> 6   0.11151863 #> 7  -0.41946509 #> 8  -0.55109199 #> 9  -0.33254661 #> 10  0.35500796 #>  #> $est_dim #> [1] 1 #>  #> $num_cpgs #> [1] 10 #>  #> $region #> [1] 1 #>"}]
